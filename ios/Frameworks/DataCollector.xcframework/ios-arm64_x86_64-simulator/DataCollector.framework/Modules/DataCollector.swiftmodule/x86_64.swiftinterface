// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DataCollector
import CoreLocation
import CoreTelephony
@_exported import DataCollector
import Foundation
import MachO
import Swift
import UIKit
public enum ScreenTags : Swift.String {
  case Login
  case ForgotPassword
  case SignUp
  case ProductsList
  case ProductDetail
  case ShoppingCart
  case Checkout
  case PurchaseConfirmation
  case Settings
  case Profile
  case PaymentDetails
  case ShippingDetails
  case SendMoney
  case GiftCard
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(TrackingButton) open class TrackingButton : UIKit.UIButton {
  public var trackingAction: DataCollector.ButtonTrackingAction!
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataCollectorService {
  public static let `default`: DataCollector.DataCollectorService
  public var ignoreDataCollection: Swift.Bool
  public func getLogs() -> Swift.String
  public func start(withSessionKey sessionKey: Swift.String, loginID: Swift.String, completion: ((Swift.Bool) -> ())? = nil)
  public func start(withSessionKey sessionKey: Swift.String, loginID: Swift.String, sandboxEnabled: Swift.Bool = true, completion: ((Swift.Bool) -> ())? = nil)
  public func sendLocationData(latitude: Swift.Double, longitude: Swift.Double, completion: ((Swift.Bool) -> ())? = nil)
  @objc deinit
}
public enum ButtonTrackingAction : Swift.String {
  case LoginAttempt
  case ForgotPassword
  case SignUp
  case SignUpAttempt
  case Search
  case AddToCart
  case RemoveFromCart
  case ShowCart
  case ProceedToCheckout
  case ConfirmPaymentMethod
  case ConfirmShippingMethod
  case CompleteOrder
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(TrackingPickerView) open class TrackingPickerView : UIKit.UIPickerView {
  @objc @IBInspectable public var fieldTag: Swift.String
  @objc override dynamic open var isHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class EventsTrackerViewController : UIKit.UIViewController {
  open var screenTag: DataCollector.ScreenTags {
    get
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum FieldTags : Swift.String {
  case LoginID
  case Password
  case ProductSearch
  case AddToCart
  case RemoveFromCart
  case TransferRecipient
  case TransferSender
  case TransferToAccount
  case TransferAmount
  case TransferDate
  case BillingFirstName
  case BillingLastName
  case BillingAddressLine1
  case BillingAddressLine2
  case BillingCity
  case BillingRegion
  case BillingPostalCode
  case BillingCountryCode
  case PurchaseCardNumber
  case PurchaseCardExpirationDateFull
  case PurchaseCardExpirationDateMonth
  case PurchaseCardExpirationDateYear
  case PurchaseCardCVV
  case PurchaseAlternateAccount
  case DeliveryRecipient
  case DeliveryMethod
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(TrackingTextField) open class TrackingTextField : UIKit.UITextField {
  @objc deinit
  @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc @IBInspectable public var identifier: Swift.String
  @objc @IBInspectable public var fieldTag: Swift.String
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension TrackingTextField : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public enum UserEventType : Swift.Int {
  case None
  case LoginEnter
  case LoginExit
  case ForgotPasswordEnter
  case ForgotPasswordExit
  case SignUpEnter
  case SignUpExit
  case ProductsListEnter
  case ProductsListExit
  case ProductDetailEnter
  case ProductDetailExit
  case ShoppingCartEnter
  case ShoppingCartExit
  case CheckoutEnter
  case CheckoutExit
  case PurchaseConfirmationEnter
  case PurchaseConfirmationExit
  case SettingsEnter
  case SettingsExit
  case ProfileEnter
  case ProfileExit
  case PaymentDetailsEnter
  case PaymentDetailsExit
  case ShippingDetailsEnter
  case ShippingDetailsExit
  case SendMoneyEnter
  case SendMoneyExit
  case GiftCardEnter
  case GiftCardExit
  case LoginAttempt
  case ForgotPassword
  case SignUp
  case SignUpAttempt
  case Search
  case AddToCart
  case RemoveFromCart
  case ShowCart
  case ProceedToCheckout
  case ConfirmPaymentMethod
  case ConfirmShippingMethod
  case CompleteOrder
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
public typealias Parameters = [Swift.String : Any]
extension DataCollector.ScreenTags : Swift.Equatable {}
extension DataCollector.ScreenTags : Swift.Hashable {}
extension DataCollector.ScreenTags : Swift.RawRepresentable {}
extension DataCollector.ButtonTrackingAction : Swift.Equatable {}
extension DataCollector.ButtonTrackingAction : Swift.Hashable {}
extension DataCollector.ButtonTrackingAction : Swift.RawRepresentable {}
extension DataCollector.FieldTags : Swift.Equatable {}
extension DataCollector.FieldTags : Swift.Hashable {}
extension DataCollector.FieldTags : Swift.RawRepresentable {}
extension DataCollector.UserEventType : Swift.Equatable {}
extension DataCollector.UserEventType : Swift.Hashable {}
extension DataCollector.UserEventType : Swift.RawRepresentable {}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DataCollector
import CoreLocation
import CoreTelephony
@_exported import DataCollector
import Foundation
import MachO
import Swift
import UIKit
public enum ScreenTags : Swift.String {
  case Login
  case ForgotPassword
  case SignUp
  case ProductsList
  case ProductDetail
  case ShoppingCart
  case Checkout
  case PurchaseConfirmation
  case Settings
  case Profile
  case PaymentDetails
  case ShippingDetails
  case SendMoney
  case GiftCard
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(TrackingButton) open class TrackingButton : UIKit.UIButton {
  public var trackingAction: DataCollector.ButtonTrackingAction!
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataCollectorService {
  public static var showLogs: Swift.Bool
  public static let `default`: DataCollector.DataCollectorService
  public func start(withSessionKey sessionKey: Swift.String, loginID: Swift.String, sandboxEnabled: Swift.Bool = true, completion: ((Swift.Bool) -> ())? = nil)
  public func sendLocationData(latitude: Swift.Double, longitude: Swift.Double, completion: ((Swift.Bool) -> ())? = nil)
  @objc deinit
}
public enum ButtonTrackingAction : Swift.String {
  case LoginAttempt
  case ForgotPassword
  case SignUp
  case SignUpAttempt
  case Search
  case AddToCart
  case RemoveFromCart
  case ShowCart
  case ProceedToCheckout
  case ConfirmPaymentMethod
  case ConfirmShippingMethod
  case CompleteOrder
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class EventsTrackerViewController : UIKit.UIViewController {
  open var screenTag: DataCollector.ScreenTags {
    get
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum FieldTags : Swift.String {
  case LoginID
  case Password
  case ProductSearch
  case AddToCart
  case RemoveFromCart
  case TransferRecipient
  case TransferSender
  case TransferToAccount
  case TransferAmount
  case TransferDate
  case BillingFirstName
  case BillingLastName
  case BillingAddressLine1
  case BillingAddressLine2
  case BillingCity
  case BillingRegion
  case BillingPostalCode
  case BillingCountryCode
  case PurchaseCardNumber
  case PurchaseCardExpirationDate
  case PurchaseCardCVV
  case PurchaseAlternateAccount
  case DeliveryRecipient
  case DeliveryMethod
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(TrackingTextField) open class TrackingTextField : UIKit.UITextField {
  public static var showLogs: Swift.Bool
  @objc deinit
  @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc @IBInspectable public var identifier: Swift.String
  @objc @IBInspectable public var fieldTag: Swift.String
  @objc @IBInspectable public var showLogs: Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension TrackingTextField : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public typealias Parameters = [Swift.String : Any]
extension DataCollector.ScreenTags : Swift.Equatable {}
extension DataCollector.ScreenTags : Swift.Hashable {}
extension DataCollector.ScreenTags : Swift.RawRepresentable {}
extension DataCollector.ButtonTrackingAction : Swift.Equatable {}
extension DataCollector.ButtonTrackingAction : Swift.Hashable {}
extension DataCollector.ButtonTrackingAction : Swift.RawRepresentable {}
extension DataCollector.FieldTags : Swift.Equatable {}
extension DataCollector.FieldTags : Swift.Hashable {}
extension DataCollector.FieldTags : Swift.RawRepresentable {}
